# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
vendor/
backend/vendor

# Go workspace file
go.work

# Build output
build/
dist/

# Backend specific
backend/cortex-server
cortex-core/cortex-server
backend/tmp/
backend/logs/

# Node.js dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Frontend build output
frontend/dist/
frontend/build/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log

# Database files
*.db
*.sqlite
*.sqlite3

# Temporary files
tmp/
temp/

# Coverage reports
coverage/
*.cover
*.coverprofile
*.profraw
*.prodata

# Docker
.dockerignore

# Configuration files with sensitive data
config/local.yaml
config/production.yaml

# Test artifacts
testdata/output/

# Backup files
*.bak
*.backup

# Cache directories
.cache/
.npm/
.yarn/

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/
target/

# Rust build artifacts
Cargo.lock
**/target/
**/target-docker/
**/*.rs.bk

# binary fiels
cortex-core/cortex-core
cortex-core/cortex-core-linux
cortex-core/cortex-core-windows
cortex-core/bin
cortex-core/main
cortex-core/server

# ignore header files since they are generated
include/*.h

# frontend deploy temp
deploy_temp
