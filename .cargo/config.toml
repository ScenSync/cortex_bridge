# Cargo 构建配置优化
# 这些设置可以显著提升构建速度

# ============================================================================
# 网络优化 - 使用 sparse registry protocol 加速依赖下载
# ============================================================================
[registries.crates-io]
protocol = "sparse"

# ============================================================================
# 构建优化 - 增加并行度和优化链接器
# ============================================================================
[build]
# 使用所有可用的 CPU 核心进行并行编译
jobs = 4  # 可以根据 CI/本地机器调整
incremental = true  # 启用增量编译

# pipelining = true  # 已在 Rust 1.81+ 默认启用，无需显式设置

# ============================================================================
# 目标特定配置 - 优化链接器性能
# ============================================================================

# Linux x86_64 配置（Docker 构建使用）
[target.x86_64-unknown-linux-gnu]
# 使用 mold 链接器（如果可用）- 比 ld 快 5-10 倍
# linker = "clang"
# rustflags = ["-C", "link-arg=-fuse-ld=mold"]

# 如果没有 mold，使用 lld（比 GNU ld 快 2-3 倍）
linker = "clang"
rustflags = ["-C", "link-arg=-fuse-ld=lld"]

# macOS ARM64 配置（本地开发）
[target.aarch64-apple-darwin]
# macOS 使用系统链接器即可，已经很快
rustflags = ["-C", "link-arg=-fuse-ld=ld64"]

# macOS x86_64 配置
[target.x86_64-apple-darwin]
rustflags = ["-C", "link-arg=-fuse-ld=ld64"]

# ============================================================================
# 未来优化选项（需要 nightly Rust）
# ============================================================================
# [unstable]
# # 启用更激进的并行前端（需要 nightly）
# # threads = 8
# 
# # 启用 build-std 以优化 std 库（需要 nightly）
# # build-std = ["std", "panic_abort"]
# # build-std-features = ["panic_immediate_abort"]

# ============================================================================
# Cargo-specific 优化
# ============================================================================
[net]
# 增加网络并发数，加快依赖下载
git-fetch-with-cli = true  # 使用 Git CLI 可能更快

