name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## Changes in ${{ steps.get_version.outputs.version }}
          
          ### Features
          - Unified EasyTier integration for Cortex applications
          - Core EasyTier functionality with C FFI interfaces
          - Web client management with MySQL storage
          - Cross-platform support (Linux, macOS, Windows)
          
          ### Technical Details
          - Built with Rust ${{ env.RUST_VERSION }}
          - Supports both static and dynamic linking
          - Comprehensive test coverage
          - Security audited dependencies

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: easytier-bridge-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: easytier-bridge-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: easytier-bridge-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: easytier-bridge-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: easytier-bridge-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl

    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
        fi
        cargo build --release --target ${{ matrix.target }} --all-features

    - name: Build C headers
      run: |
        chmod +x build_headers.sh
        ./build_headers.sh

    - name: Create artifact directory
      run: |
        mkdir -p artifacts/${{ matrix.artifact_name }}
        cp target/${{ matrix.target }}/release/libeasytier_bridge.* artifacts/${{ matrix.artifact_name }}/ 2>/dev/null || true
        cp include/easytier_bridge.h artifacts/${{ matrix.artifact_name }}/
        cp README.md artifacts/${{ matrix.artifact_name }}/
        cp LICENSE artifacts/${{ matrix.artifact_name }}/ 2>/dev/null || echo "MIT" > artifacts/${{ matrix.artifact_name }}/LICENSE

    - name: Create tarball (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd artifacts
        tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.artifact_name }}

    - name: Create zip (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd artifacts
        7z a ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}

    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./artifacts/${{ matrix.artifact_name }}.tar.gz
        asset_name: ${{ matrix.artifact_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./artifacts/${{ matrix.artifact_name }}.zip
        asset_name: ${{ matrix.artifact_name }}.zip
        asset_content_type: application/zip

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish --all-features

  docker-build:
    name: Build Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: easytier/bridge
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max