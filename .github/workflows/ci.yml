name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast jobs that don't need database
  quick-checks:
    name: Quick Checks (Format, Clippy, Build)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature-set: ["server", "client", "default"]
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/debug/deps
          target/debug/build
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

    - name: Check formatting
      if: matrix.feature-set == 'default'
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: |
        if [ "${{ matrix.feature-set }}" = "default" ]; then
          cargo clippy --all-targets --all-features -- -D warnings
        else
          cargo clippy --no-default-features --features ${{ matrix.feature-set }} -- -D warnings
        fi

    - name: Build check
      run: |
        if [ "${{ matrix.feature-set }}" = "default" ]; then
          cargo check --all-targets --all-features
        else
          cargo check --no-default-features --features ${{ matrix.feature-set }} --all-targets
        fi

  # Fast unit tests without database
  unit-tests:
    name: Unit Tests (No Database)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature-set: ["server", "client", "default"]
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/debug/deps
          target/debug/build
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

    - name: Run unit tests
      run: |
        if [ "${{ matrix.feature-set }}" = "default" ]; then
          cargo test --lib --verbose
        else
          cargo test --no-default-features --features ${{ matrix.feature-set }} --lib --verbose
        fi

  # Integration tests with database (only for server feature)
  integration-tests:
    name: Integration Tests (With Database)
    runs-on: ubuntu-latest
    needs: [quick-checks, unit-tests]  # Wait for fast jobs first
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: easytier_bridge_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/debug/deps
          target/debug/build
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

    - name: Run server integration tests
      run: cargo test --no-default-features --features server --verbose
      env:
        DATABASE_URL: mysql://root:root123@127.0.0.1:3306/easytier_bridge_test

    - name: Run full integration tests
      run: cargo test --all-features --verbose
      env:
        DATABASE_URL: mysql://root:root123@127.0.0.1:3306/easytier_bridge_test

  # C header generation (only run once)
  c-headers:
    name: Generate C Headers
    runs-on: ubuntu-latest
    needs: quick-checks  # Wait for format/clippy checks
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/debug/deps
          target/debug/build
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler
        cargo install cbindgen --force

    - name: Generate C headers
      run: |
        mkdir -p include
        cbindgen --config cbindgen.toml --crate easytier-bridge --output include/easytier_bridge.h

    - name: Verify C headers
      run: |
        if [ ! -f include/easytier_bridge.h ]; then
          echo "Error: C header file not generated"
          exit 1
        fi
        echo "C header file size: $(wc -c < include/easytier_bridge.h) bytes"

  # Coverage (only run on main branch to save resources)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    needs: [quick-checks, unit-tests]  # Don't wait for slow integration tests
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: easytier_bridge_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/debug/deps
          target/debug/build
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      env:
        DATABASE_URL: mysql://root:root123@127.0.0.1:3306/easytier_bridge_test
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-checks, unit-tests, integration-tests, c-headers]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [ "${{ needs.quick-checks.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.c-headers.result }}" != "success" ]; then
          echo "One or more CI jobs failed"
          exit 1
        fi
        echo "All CI jobs passed successfully!"