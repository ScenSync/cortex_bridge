name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast jobs that don't need database
  quick-checks:
    name: Quick Checks (Format, Clippy, Build)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo docker image prune --all --force

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Build check
      run: cargo check --workspace --all-targets --all-features

  # Fast unit tests without database
  unit-tests:
    name: Unit Tests (No Database)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo docker image prune --all --force

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

    - name: Run unit tests
      run: |
        # Run unit tests for all workspace crates
        cargo test --workspace --lib --all-features --verbose

  # Integration tests with database (only for server feature)
  integration-tests:
    name: Integration Tests (With Database)
    runs-on: ubuntu-latest
    needs: [quick-checks, unit-tests]  # Wait for fast jobs first
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: easytier_bridge_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        # Remove unnecessary tools and files
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        echo "Disk space after cleanup:"
        df -h

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler lld

    - name: Run integration tests
      run: cargo test --workspace --all-features --verbose -- --test-threads=1
      env:
        DATABASE_URL: mysql://root:root123@127.0.0.1:3306/easytier_bridge_test
        CARGO_INCREMENTAL: 0
        CARGO_BUILD_JOBS: 2

    - name: Clean up test databases
      run: |
        cargo test --package easytier_config_server --test drop_test_dbs -- --nocapture || true
        echo "Test database cleanup completed"

  # C header generation (only run once)
  c-headers:
    name: Generate C Headers
    runs-on: ubuntu-latest
    needs: quick-checks  # Wait for format/clippy checks
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler
        cargo install cbindgen --force

    - name: Generate C headers
      run: |
        # Generate headers for each crate
        cd easytier_common && cargo build && cd ..
        cd easytier_device_client && cargo build && cd ..
        cd easytier_config_server && cargo build && cd ..
        cd easytier_network_gateway && cargo build && cd ..

    - name: Verify C headers
      run: |
        # Verify all header files exist
        if [ ! -f easytier_common/include/easytier_common.h ]; then
          echo "Error: easytier_common.h not generated"
          exit 1
        fi
        if [ ! -f easytier_device_client/include/easytier_device_client.h ]; then
          echo "Error: easytier_device_client.h not generated"
          exit 1
        fi
        if [ ! -f easytier_config_server/include/easytier_config_server.h ]; then
          echo "Error: easytier_config_server.h not generated"
          exit 1
        fi
        if [ ! -f easytier_network_gateway/include/easytier_network_gateway.h ]; then
          echo "Error: easytier_network_gateway.h not generated"
          exit 1
        fi
        echo "All C header files generated successfully"

  # Coverage (only run on main and develop branches to save resources)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: [quick-checks, unit-tests]  # Don't wait for slow integration tests
    timeout-minutes: 60  # Realistic timeout for coverage builds
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: easytier_bridge_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      env:
        DATABASE_URL: mysql://root:root123@127.0.0.1:3306/easytier_bridge_test
        CARGO_INCREMENTAL: 0
        RUSTFLAGS: "-C instrument-coverage"
      run: |
        echo "Running coverage on library code only to reduce compilation time..."
        cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
      timeout-minutes: 60

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-checks, unit-tests, integration-tests, c-headers]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [ "${{ needs.quick-checks.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.c-headers.result }}" != "success" ]; then
          echo "One or more CI jobs failed"
          exit 1
        fi
        echo "All CI jobs passed successfully!"